## DEseq commands

library("DESeq2")
library(edgeR)
library(tidyverse)

####EXAMPLE CODE FOR PURE (NON-HYBRID) SAMPLES IN ONE BRAIN REGION #####

####grep for files with counts for each sample within directory
sampleFiles <- grep("STAR",list.files(directory),value=TRUE)

####metaData for files
metaData <- read.csv('meta_recode.txt', header = TRUE, sep = "\t")
metaData1 <- metaData[order(metaData$ID),]

individual <- dplyr::pull(metaData1, Individual)
conditions <- dplyr::pull(metaData1, Condition)
Population <- dplyr::pull(metaData1, Population)

###CREAT SAMPLE TABLE FOR DESEQ#####
sampleTable<-data.frame(sampleName=sampleFiles, fileName=sampleFiles, condition=conditions, population=Population, individual=individual)
ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, design=~condition + population + condition:population)
dds<-DESeq(ddsHTSeq)

matrix(resultsNames(dds))

dds <- estimateSizeFactors(dds)

##REMOVE GENES WITH LOW COUNTS##
idx <- rowSums(counts(dds, normalized=TRUE) >= 5 ) >= 4
dds <- dds[idx,]
dds <- DESeq(dds)

###RESULTS TABLES####
##DE between migratory states (Winter vs Spring ###
res <- results(dds, list( c("condition_Winter_vs_Spring") ))

res <- res[order(res$padj),]
write.table(res, file='Pure_CNH1_treatment_effect_DeSeq_outpuT.csv', sep=',', quote=FALSE)

###Subspecies (population) DE###
res = results(dds, list( c("population_Inland_vs_Coastal") ))
res <- res[order(res$padj),]
write.table(res, file='Pure_CNH1_population_effect_DeSeq_outpuT.csv', sep=',', quote=FALSE)

##Interaction (GxE) results###
res = results(dds, name="conditionWinter.populationInland")
res <- res[order(res$padj),]
write.table(res, file='Pure_CNH1_interaction_effect_DeSeq_outpuT.csv', sep=',', quote=FALSE)

## custom ASE commands (GATK, ASEReadCounter, log2fold change calculations)

## ASEP commands
## ML please add how "CNH1_spring_n3.txt" was generated

library(ASEP)
dat = read.table("CNH1_spring_n3.txt", header=T)

limit = read.table(args[1])
limit = limit[,1]
dat <- subset(dat,dat$gene %in% limit)

dat_Spring = dat[dat$group=='Spring',]
dat_Spring = dat_Spring[,c("gene","id","snp","ref","total","group")]
set.seed(6)
spring_ASE <- ASE_detection(dat_all = dat_Spring, phased=FALSE, varList=NULL, adaptive=TRUE, n_resample=10^6, parallel=T, n_core=16, save_out=T, name_out=paste("spring_results",args[1],".txt",sep="_"))
#save.image("spring_ASE.RData")
